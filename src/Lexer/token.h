#ifndef TOKEN_H
#define TOKEN_H

typedef enum token_t {
	TOKEN_ID, 
	TOKEN_CHAR_LITERAL,
	TOKEN_STR, 
	TOKEN_FUNCTION_KEYWORD, 
	TOKEN_LET_KEYWORD, // 4
	TOKEN_INT_KEYWORD, 
	TOKEN_CHAR_KEYWORD, 
	TOKEN_BOOL_KEYWORD, 
	TOKEN_VOID_KEYWORD, 
	TOKEN_STRUCT_KEYWORD, // 9
	TOKEN_ENUM_KEYWORD, // 10
	TOKEN_IF_KEYWORD, 
	TOKEN_ELSE_KEYWORD, 
	TOKEN_FOR_KEYWORD, 
	TOKEN_WHILE_KEYWORD, // 14
	TOKEN_CONTINUE_KEYWORD, // 15
	TOKEN_BREAK_KEYWORD, 
	TOKEN_RETURN_KEYWORD, 
	TOKEN_SWITCH_KEYWORD, 
	TOKEN_CASE_KEYWORD, // 19
	TOKEN_TRUE_KEYWORD,
	TOKEN_FALSE_KEYWORD,

	TOKEN_INTEGER, 
	TOKEN_LEFT_PARENTHESES, // 23
	TOKEN_RIGHT_PARENTHESES,  
	TOKEN_LEFT_BRACE, 
	TOKEN_RIGHT_BRACE, 
	TOKEN_LEFT_BRACKET, 
	TOKEN_RIGHT_BRACKET,

	TOKEN_ADD,  // 29
	TOKEN_SUB, 
	TOKEN_DIV, 
	TOKEN_MUL, 
	TOKEN_MODULO, 
	TOKEN_ADD_EQUAL,  // 34
	TOKEN_SUB_EQUAL, 
	TOKEN_DIV_EQUAL, 
	TOKEN_MUL_EQUAL, 
	
	TOKEN_LESS, 
	TOKEN_GREATER, // 39
	TOKEN_LESS_EQUAL, 
	TOKEN_GREATER_EQUAL, 
	TOKEN_NOT, 
	TOKEN_EQUAL, 
	TOKEN_NOT_EQUAL,  // 44
	TOKEN_INCREMENT, 
	TOKEN_DECREMENT, 
	TOKEN_LOGICAL_AND, 
	TOKEN_LOGICAL_OR, 
	TOKEN_ARROW,  // 49

	TOKEN_ASSIGNMENT, // 50
	TOKEN_COMMA, 
	TOKEN_COLON, // 52
	TOKEN_SEMICOLON, 
	TOKEN_AMPERSAND,  // 54
	TOKEN_PERIOD, 

	TOKEN_UNKNOWN, // 56
	TOKEN_EOF,
	TOKEN_STR_KEYWORD
} token_t;

typedef union {
	int val;
	char c;
	char* str;
} TokenValue;

typedef struct Token {
	token_t type;
	TokenValue value;
	int line;
	int column;
} Token;

#endif