function factorial(n: int) -> int {
    if (n == 0) {
        return 1;
    }
    return n * factorial(n - 1);
}

function is_prime(n: int) -> bool {
    if (n <= 1) {
        return false;
    }
    let i: int = 2;
    while (i * i <= n) {
        if (n % i == 0) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

function analyze_numbers(size: int, check_prime_flag: bool) -> char {
    let values: int[6] = {5, 8, 3, 12, 7, 2};
    let special_char: char = 'N';
    let all_primes_found: bool = true;

    for (let i: int = 0; i < size; i++) {
        if (i >= 6) {
            break;
        }

        let current_val: int = values[i];
        if (check_prime_flag && is_prime(current_val)) {
            let fact: int = factorial(current_val);
            if (fact > 5000) {
                special_char = 'F';
            }
        } else if (!check_prime_flag || current_val % 2 == 0) {
            values[i] = 0; 
            all_primes_found = false;
            continue;
        } else {
             all_primes_found = false;
        }
    }

    if (all_primes_found) {
        return 'P';
    } else {
        return special_char;
    }
}

function main_test_one() -> void {
    let final_code: char = analyze_numbers(6, true);
    let is_special: bool = false;
    if (final_code == 'F') {
        is_special = true;
    }
}